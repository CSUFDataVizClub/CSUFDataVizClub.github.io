}
# Call to the function
gibbs<-gibbs.sampler()
a<-quantile(gibbs[,2],c(0.025,.975))
b<-quantile(gibbs[,4],c(0.025,.975))
mn<-matrix(x-mean(x),ncol=1)%*%matrix(b,nrow=1)
mn<-a+mn
s_h<-1/quantile(sort(gibbs[,1]),c(0.025,.975))
mn;s_h
cat("For the first rat, weight for week 1~ N([",mn[1,2],mn[1,1],"],[",s_h[2],s_h[1],"])",
"\nweek 2 ~N([",mn[2,2],mn[2,1],"],[",s_h[2],s_h[1],"]) and so on.")
round(cov(gibbs[,2:5]),3)
library(Hmisc)
rcorr(gibbs[,2:5],type='pearson')
gibbs<-gibbs.sampler()
round(cov(gibbs[,2:5]),3)
rcorr(gibbs[,2:5],type='pearson')
Leukemia
load('/home/taha/University_Exercises/final_535')
summary(Leukemia)
Leukemia$res<-ifelse(Leukemia$Result=="0",0,1)
summary(Leukemia)
Leukemia$res<-ifelse(Leukemia$Result=="Death",0,1)
summary(Leukemia)
Leukemia<-within(Leukemia,Group<-relevel(Group,"B"))
cp<-coxph(data=Leukemia,Surv(Time,event = res)~logWBC+Group)
summary(cp)
cp<-coxph(data=Leukemia,Surv(Time,event = res)~logWBC+Group)
summary(cp)
cat("Hazard rate at each time in treatment group is",exp(cp$coefficients[2]),
"\ncompared to control group, controlling for WBC.")
ci<-exp(cp$coefficients[2]+qt(p=c(.025,.975),df=43)*2.0303)
ci
qt(p=c(.025,.975),df=43)
plot(survfit(cp),xlab="Time", ylab="Estimated survival rates")
survfit(cx)
cx<-coxph(data=aids,Surv(Time,event = death)~as.factor(drug)+CD4)
survfit(cx)
?survfit
srv<-survfit(cp)
srv$surv
srv$type
survfit(cx)
srv<-survfit(cx)
plot(srv,conf.int = FALSE)
plot(srv,col = c(1,2))
plot(srv,conf.int = FALSE,col = c(1,2))
plot(survfit(cp),xlab="Time: Weeks", ylab="Estimated survival rates",col=c(1,2),conf.int = FALSE)
plot(survfit(cp,id = Group),xlab="Time: Weeks", ylab="Estimated survival rates",col=c(1,2),conf.int = FALSE)
plot(survfit(cp,id = "Group""),xlab="Time: Weeks", ylab="Estimated survival rates",col=c(1,2),conf.int = FALSE)
plot(survfit(cp,id = "Group"),xlab="Time: Weeks", ylab="Estimated survival rates",col=c(1,2),conf.int = FALSE)
grp_A<-subset(Leukemia,Group=="A")
grp_B<-subset(Leukemia,Group=="B")
survfit(Surv(Time,res))
attach(Leukemia)
survfit(Surv(Time,res))
Surv(Time,res)
survfit(Surv(Time,res)~Group+logWBC)
plot(survfit(Surv(Time,res)~Group+logWBC))
survfit(Surv(Time,res)~Group+logWBC)
summary(survfit(Surv(Time,res)~Group+logWBC))
survfit(Surv(Time,res)~Group+logWBC)
cp<-coxph(data=Leukemia,Surv(Time,event = res)~logWBC+Group,method='kaplan-meier')
plot(survfit(cp,method='kaplan-meier'),xlab="Time: Weeks", ylab="Estimated survival rates",col=c(1,2),conf.int = FALSE)
survfit(cp,method='kaplan-meier')
plot(survfit(cp,newdata=data.frame(Group="A"),method='kaplan-meier'),xlab="Time: Weeks", ylab="Estimated survival rates",col=c(1,2),conf.int = FALSE)
plot(survfit(cp,newdata=data.frame(Group="A",logWD=1),method='kaplan-meier'),xlab="Time: Weeks", ylab="Estimated survival rates",col=c(1,2),conf.int = FALSE)
plot(survfit(cp,newdata=data.frame(Group="A",logWD=1)),xlab="Time: Weeks", ylab="Estimated survival rates",col=c(1,2),conf.int = FALSE)
newdata<-data.frame(Group="A",logWD=1)
plot(survfit(cp,newdata=newdata),xlab="Time: Weeks", ylab="Estimated survival rates",col=c(1,2),conf.int = FALSE)
Leukemia
newdata<-data.frame(Group="A",logWD=2.31)
survfit(cp,newdata=newdata)
cp<-coxph(data=Leukemia,Surv(Time,event = res)~Group)
newdata<-data.frame(Group="A")
survfit(cp,newdata=newdata)
plot(survfit(cp,newdata=newdata),xlab="Time: Weeks", ylab="Estimated survival rates",conf.int = FALSE)
grp_B<-data.frame(Group='B)
lines(survfit(cp,newdata=grp_B),type='s')
lines(survfit(cp,newdata=grp_B))
cp<-coxph(data=Leukemia,Surv(Time,event = res)~Group)
grp_A<-data.frame(Group="A")
grp_B<-data.frame(Group='B')
plot(survfit(cp,newdata=newdata),xlab="Time: Weeks", ylab="Estimated survival rates",conf.int = FALSE)
lines(survfit(cp,newdata=grp_B),col=2,lty=3)
legend('bottomleft',c("Treatment Group","Control Group"),cex=.6,lty=c(1,3),col=c(1,2))
```
lines(survfit(cp,newdata=grp_B),col=2,lty=3,conf.int = FALSE)
cp<-coxph(data=Leukemia,Surv(Time,event = res)~Group)
grp_A<-data.frame(Group="A")
grp_B<-data.frame(Group='B')
plot(survfit(cp,newdata=newdata),xlab="Time: Weeks", ylab="Estimated survival rates",conf.int = FALSE)
lines(survfit(cp,newdata=grp_B),col=2,lty=3,conf.int = FALSE)
legend('bottomleft',c("Treatment Group","Control Group"),cex=.6,lty=c(1,3),col=c(1,2))
legend('bottomleft',c("Treatment Group","Control Group"),cex=.8,lty=c(1,3),col=c(1,2))
138.65*.4
install.packages('mvtnorm')
x<-c(3,1,0,4)
y<-c(2,2,1,3)
lm(y~x)
funx<-function(x){-2+.5x}
funx(x)
funx<-function(x){-2+.5*x}
funx(x)
(y-funx(x))^2/8
sum(y-funx(x))^2/8
sum(y-funx(x))^2
funx<-function(x){x}
funx(x)
sum(y-funx(x))^2/8
y
funx(x)
sum((y-funx(x))^2)/8
funx<-function(x){-2+.5*x}
funx(x)
sum((y-funx(x))^2)/8
x<-c(7921,5184,8836,4761)
(x[2]-mean(x))/range(x)
x[2]-mean(x)
range(x)
(x[2]-mean(x))/(range(x)[2]-range(x)[1])
install.packages("flexdashboard")
install.packages("nclRshiny", repos="http://rcourses.github.io/drat/")
install.packages("dygraphs")
install.packages("nclRshiny", repos="http://rcourses.github.io/drat/")
install.packages("ggplot2movies")
install.packages("nclRshiny", repos="http://rcourses.github.io/drat/")
installed.packages("DT")
install.packages("DT")
install.packages("plotly")
install.packages(
lib  = lib <- .libPaths()[1],
pkgs = as.data.frame(installed.packages(lib), stringsAsFactors=FALSE)$Package,
type = 'source'
)
installed.packages()
installed.packages()[,2]
pkgs<-installed.packages()[,2]
install.packages(pkgs)
str(pkgs)
pkgs<-names(pkgs)
install.packages(pkgs)
install.packages(pkgs)
install.packages(pkgs)
install.packages(pkgs)
install.packages(pkgs)
install.packages(pkgs)
install.packages(pkgs)
install.packages("plotly")
library("shiny")
library("flexdashboard")
library("ggplot2")
data(movies, package="nclRshiny")
top_movies = movies[order(-movies$rating),
c("title", "year", "budget", "rating", "Romance", "Action", "Animation"), ]
colnames(top_movies) = c("Title", "Year", "Budget", "Rating","Romance", "Action", "Animation")
theme_set(theme_bw())
selectInput("movie_type", label = "Movie genre",
c("Romance", "Action", "Animation"))
renderTable({
t_m = top_movies[top_movies[input$movie_type]==1,]
t_m[1:10, 1:4]
})
DT::renderDataTable({
t_m = top_movies[top_movies[input$movie_type]==1,]
DT::datatable(t_m[,1:4], rownames = FALSE)
})
renderPlot({
an = movies[movies[input$movie_type]==1,]
nclRshiny::setnicepar()
plot(an$rating, an$length, ylab="Length", xlab="Rating",
pch=21, bg="steelblue", ylim=c(0, max(an$length)),
xlim=c(1, 10), main=paste0(input$movie_type, " movies"))
grid()
})
renderPlot({
an = movies[movies[input$movie_type]==1,]
nclRshiny::setnicepar()
hist(an$length, breaks="fd", col="steelblue", xlab="Movie Length",
main="Histogram of movie length", xlim=c(0, max(an$length)))
grid()
})
library(plotly)
renderPlotly({
an = movies[movies[input$movie_type]==1,]
g = ggplot(an, aes(length, rating)) +
geom_point(size=0.5, aes(text=paste("Film: ", title))) +
xlab("Length") + ylab("Rating") +
ylim(c(0, 10))
ggplotly(g)
})
renderValueBox({
an = movies[movies[input$movie_type]==1,]
valueBox(sum(an$rating <3), icon = "ion-videocamera",
caption="Movies Rated less than 3", color="red")
})
library(dygraphs)
renderDygraph({
years = movies[movies$year > 1929 & movies[input$movie_type]==1,]
rat_by_year = tapply(years$rating, years$year, mean)
x = ts(as.vector(rat_by_year), start=1930)
y = cbind(Rating=x)
dygraph(y, main = "Ratings over the years",
ylab = "Ratings", group="Ratings") %>%
dyRangeSelector() %>%
dyOptions(stepPlot = TRUE) %>%
dySeries("V1", label = "Rating")
})
library(dygraphs)
renderDygraph({
years = movies[movies$year > 1929 & movies[input$movie_type]==1,]
num_by_year = tapply(years$rating, years$year, sum)
## Create ts object
x = ts(as.vector(num_by_year), start=1930)
y = cbind(Rating=x)
## Plot code
dygraph(y, main = "Number of movies over the years",
ylab = "No. of movies",group="Ratings") %>%
dyRangeSelector() %>%
dyOptions(stepPlot = TRUE) %>%
dySeries("V1", label = "No. of Movies made")
})
library(flexdashboard)
source("package_stream.R")
pkgStream <- packageStream()
library("package_stream")
install.packages("package_stream")
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param dir the directory to process R Markdown files.
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org>
convertRMarkdown <- function(dir=getwd(), images.dir=dir, images.url='/assets/images/',
out_ext='.markdown', in_ext='.rmd', recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
files <- list.files(path=dir, pattern=in_ext, ignore.case=TRUE, recursive=recursive	)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(f)
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) == 2) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
outFile <- paste(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext, sep='')
render_markdown(strict=TRUE)
opts_knit$set(out.format='markdown')
opts_knit$set(base.dir=images.dir)
opts_knit$set(base.url=images.url)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
setwd("~/Git/tahamonfared.github.io/Rmd-files")
convertRMarkdown <- function(dir=getwd(), images.dir=dir, images.url='/assets/images/',
out_ext='.markdown', in_ext='.rmd', recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
files <- list.files(path=dir, pattern=in_ext, ignore.case=TRUE, recursive=recursive	)
for(f in files) {
browser()
message(paste("Processing ", f, sep=''))
content <- readLines(f)
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) == 2) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
outFile <- paste(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext, sep='')
render_markdown(strict=TRUE)
opts_knit$set(out.format='markdown')
opts_knit$set(base.dir=images.dir)
opts_knit$set(base.url=images.url)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
setwd("~/Git/tahamonfared.github.io/Rmd-files")
convertRMarkdown()
convertRMarkdown()
convertRMarkdown()
frontMatter
statusLine <- which(substr(content, 1, 7) == 'status:')
statusLine
convertRMarkdown <- function(dir=getwd(), images.dir=dir, images.url='/assets/images/',
out_ext='.markdown', in_ext='.rmd', recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
files <- list.files(path=dir, pattern=in_ext, ignore.case=TRUE, recursive=recursive	)
for(f in files) {
browser()
message(paste("Processing ", f, sep=''))
content <- readLines(f)
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) == 2) {
statusLine <- which(substr(content, 1, 7) == 'status')
publishedLine <- which(substr(content, 1, 10) == 'published')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
outFile <- paste(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext, sep='')
render_markdown(strict=TRUE)
opts_knit$set(out.format='markdown')
opts_knit$set(base.dir=images.dir)
opts_knit$set(base.url=images.url)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
setwd("~/Git/tahamonfared.github.io/Rmd-files")
convertRMarkdown()
content
statusLine
convertRMarkdown <- function(dir=getwd(), images.dir=dir, images.url='/assets/images/',
out_ext='.markdown', in_ext='.rmd', recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
files <- list.files(path=dir, pattern=in_ext, ignore.case=TRUE, recursive=recursive	)
for(f in files) {
browser()
message(paste("Processing ", f, sep=''))
content <- readLines(f)
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) == 2) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
outFile <- paste(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext, sep='')
render_markdown(strict=TRUE)
opts_knit$set(out.format='markdown')
opts_knit$set(base.dir=images.dir)
opts_knit$set(base.url=images.url)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
convertRMarkdown()
convertRMarkdown <- function(dir=getwd(), images.dir=dir, images.url='/assets/images/',
out_ext='.markdown', in_ext='.rmd', recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
files <- list.files(path=dir, pattern=in_ext, ignore.case=TRUE, recursive=recursive	)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(f)
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) == 2) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
outFile <- paste(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext, sep='')
render_markdown(strict=TRUE)
opts_knit$set(out.format='markdown')
opts_knit$set(base.dir=images.dir)
opts_knit$set(base.url=images.url)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
convertRMarkdown()
convertRMarkdown <- function(dir=getwd(), images.dir=dir, images.url='/assets/images/',
out_ext='.markdown', in_ext='.rmd', recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
files <- list.files(path=dir, pattern=in_ext, ignore.case=TRUE, recursive=recursive	)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(f)
frontMatter <- which(substr(content, 1, 3) == '---')
browser()
if(length(frontMatter) == 2) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
outFile <- paste(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext, sep='')
render_markdown(strict=TRUE)
opts_knit$set(out.format='markdown')
opts_knit$set(base.dir=images.dir)
opts_knit$set(base.url=images.url)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
convertRMarkdown()
convertRMarkdown()
convertRMarkdown()
